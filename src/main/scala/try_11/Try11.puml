@startuml

title Try11

namespace cancel {
  class DomainService << (S, lightcyan) >> {
    def apply(...): Option[Error]
  }

  class Order {
    OrderStatus
    OrderKind

    def validate(): Option[OrderError]
  }

  class Item {
    ItemStatus

    def validate(): Option[ItemError]
  }

  interface Error

  enum OrderError {
    OrderedOnly
    ClothesOnly
  }

  enum ItemError {
    WaitingOnly
  }

  DomainService --> Order
  DomainService --> Item

  Order --> OrderError
  Item --> ItemError

  OrderError -r-|> Error
  ItemError -l-|> Error
}

namespace change_deliver_to {
  class DomainService << (S, lightcyan) >> {
    def apply(...): Option[Error]
  }

  class Order {
    OrderStatus

    def validate(): Option[OrderError]
  }

  class Item {
    ItemStatus

    def validate(): Option[ItemError]
  }

  interface Error

  enum OrderError {
    OrderedOnly
  }

  enum ItemError {
    WaitingOnly
  }

  DomainService --> Order
  DomainService --> Item

  Order --> OrderError
  Item --> ItemError

  OrderError -r-|> Error
  ItemError -l-|> Error
}

namespace change_arrival_at {
  class DomainService << (S, lightcyan) >> {
    def apply(...): Option[Error]
  }

  class Order {
    OrderStatus
    OrderKind

    def validate(): Option[OrderError]
  }

  class Item {
    ItemStatus

    def validate(): Option[ItemError]
  }

  class User {
    Plan

    def validate(): Option[UserError]
  }

  interface Error

  enum OrderError {
    OrderedOnly
    ClothesOnly
  }

  enum ItemError {
    WaitingOrPackedOnly
  }

  enum UserError {
    PremiumOnly
  }

  DomainService --> Order
  DomainService --> Item
  DomainService --> User

  Order --> OrderError
  Item --> ItemError
  User --> UserError

  OrderError --|> Error
  ItemError --|> Error
  UserError --|> Error
}

cancel.ItemError -[hidden]d-> change_arrival_at.DomainService

@enduml